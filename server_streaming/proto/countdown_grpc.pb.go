// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// CountdownClient is the client API for Countdown service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CountdownClient interface {
	Start(ctx context.Context, in *CountdownRequest, opts ...grpc.CallOption) (Countdown_StartClient, error)
}

type countdownClient struct {
	cc grpc.ClientConnInterface
}

func NewCountdownClient(cc grpc.ClientConnInterface) CountdownClient {
	return &countdownClient{cc}
}

func (c *countdownClient) Start(ctx context.Context, in *CountdownRequest, opts ...grpc.CallOption) (Countdown_StartClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Countdown_serviceDesc.Streams[0], "/server_streaming.Countdown/Start", opts...)
	if err != nil {
		return nil, err
	}
	x := &countdownStartClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Countdown_StartClient interface {
	Recv() (*CountdownResponse, error)
	grpc.ClientStream
}

type countdownStartClient struct {
	grpc.ClientStream
}

func (x *countdownStartClient) Recv() (*CountdownResponse, error) {
	m := new(CountdownResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CountdownServer is the server API for Countdown service.
// All implementations must embed UnimplementedCountdownServer
// for forward compatibility
type CountdownServer interface {
	Start(*CountdownRequest, Countdown_StartServer) error
	mustEmbedUnimplementedCountdownServer()
}

// UnimplementedCountdownServer must be embedded to have forward compatible implementations.
type UnimplementedCountdownServer struct {
}

func (UnimplementedCountdownServer) Start(*CountdownRequest, Countdown_StartServer) error {
	return status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedCountdownServer) mustEmbedUnimplementedCountdownServer() {}

// UnsafeCountdownServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CountdownServer will
// result in compilation errors.
type UnsafeCountdownServer interface {
	mustEmbedUnimplementedCountdownServer()
}

func RegisterCountdownServer(s grpc.ServiceRegistrar, srv CountdownServer) {
	s.RegisterService(&_Countdown_serviceDesc, srv)
}

func _Countdown_Start_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CountdownRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CountdownServer).Start(m, &countdownStartServer{stream})
}

type Countdown_StartServer interface {
	Send(*CountdownResponse) error
	grpc.ServerStream
}

type countdownStartServer struct {
	grpc.ServerStream
}

func (x *countdownStartServer) Send(m *CountdownResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Countdown_serviceDesc = grpc.ServiceDesc{
	ServiceName: "server_streaming.Countdown",
	HandlerType: (*CountdownServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Start",
			Handler:       _Countdown_Start_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/countdown.proto",
}

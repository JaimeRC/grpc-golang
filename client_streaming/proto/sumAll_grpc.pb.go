// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SumAllServiceClient is the client API for SumAllService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SumAllServiceClient interface {
	// client streaming rpc service
	SumAll(ctx context.Context, opts ...grpc.CallOption) (SumAllService_SumAllClient, error)
}

type sumAllServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSumAllServiceClient(cc grpc.ClientConnInterface) SumAllServiceClient {
	return &sumAllServiceClient{cc}
}

func (c *sumAllServiceClient) SumAll(ctx context.Context, opts ...grpc.CallOption) (SumAllService_SumAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SumAllService_serviceDesc.Streams[0], "/client_streaming.SumAllService/SumAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &sumAllServiceSumAllClient{stream}
	return x, nil
}

type SumAllService_SumAllClient interface {
	Send(*NumberRequest) error
	CloseAndRecv() (*SumResponse, error)
	grpc.ClientStream
}

type sumAllServiceSumAllClient struct {
	grpc.ClientStream
}

func (x *sumAllServiceSumAllClient) Send(m *NumberRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sumAllServiceSumAllClient) CloseAndRecv() (*SumResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SumResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SumAllServiceServer is the server API for SumAllService service.
// All implementations must embed UnimplementedSumAllServiceServer
// for forward compatibility
type SumAllServiceServer interface {
	// client streaming rpc service
	SumAll(SumAllService_SumAllServer) error
	mustEmbedUnimplementedSumAllServiceServer()
}

// UnimplementedSumAllServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSumAllServiceServer struct {
}

func (UnimplementedSumAllServiceServer) SumAll(SumAllService_SumAllServer) error {
	return status.Errorf(codes.Unimplemented, "method SumAll not implemented")
}
func (UnimplementedSumAllServiceServer) mustEmbedUnimplementedSumAllServiceServer() {}

// UnsafeSumAllServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SumAllServiceServer will
// result in compilation errors.
type UnsafeSumAllServiceServer interface {
	mustEmbedUnimplementedSumAllServiceServer()
}

func RegisterSumAllServiceServer(s grpc.ServiceRegistrar, srv SumAllServiceServer) {
	s.RegisterService(&_SumAllService_serviceDesc, srv)
}

func _SumAllService_SumAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SumAllServiceServer).SumAll(&sumAllServiceSumAllServer{stream})
}

type SumAllService_SumAllServer interface {
	SendAndClose(*SumResponse) error
	Recv() (*NumberRequest, error)
	grpc.ServerStream
}

type sumAllServiceSumAllServer struct {
	grpc.ServerStream
}

func (x *sumAllServiceSumAllServer) SendAndClose(m *SumResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sumAllServiceSumAllServer) Recv() (*NumberRequest, error) {
	m := new(NumberRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _SumAllService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "client_streaming.SumAllService",
	HandlerType: (*SumAllServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SumAll",
			Handler:       _SumAllService_SumAll_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/sumAll.proto",
}
